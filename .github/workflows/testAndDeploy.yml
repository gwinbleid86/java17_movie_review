# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch
  # push:
    # branches: [ "main" ]
  # pull_request:
    # branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/<image-name>:latest

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3.13.0
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    # - name: Build with Maven
      # run: mvn -B package --file pom.xml
    - name: Test with Maven
      run: mvn clean test

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
      # uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
  publish:
      name: publish image
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3
        - name: Login
          run: |
            echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        - name: Build and Publish
          run: |
            docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  # deploy:
  #       needs: publish
  #       name: deploy image
  #       runs-on: ubuntu-latest

  #       steps:
  #       - name: install ssh keys
  #         # check this thread to understand why its needed:
  #         # <https://stackoverflow.com/a/70447517>
  #         run: |
  #           install -m 600 -D /dev/null ~/.ssh/id_rsa
  #           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #           ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
  #       - name: connect and pull
  #         run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker compose pull && docker compose up -d && exit"
  #       - name: cleanup
  #         run: rm -rf ~/.ssh
