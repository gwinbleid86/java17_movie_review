# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch
# push:
# branches: [ "main" ]
# pull_request:
# branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/movie_review_image:latest

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
        # - name: Build with Maven
        # run: mvn -B package --file pom.xml
      - name: Start Maven Test & Package
        run: mvn clean package
      - name: List directories
        run: pwd && ls -lah && ls -lah ./target

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: movie_review.jar
          path: ./target/movie_review*.jar
          retention-days: 1


  publish:
    needs: build
    name: publish image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: movie_review.jar

      - name: Login
        run: |
          echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Publish
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
        needs: publish
        name: deploy image
        runs-on: ubuntu-latest

        steps:
        # - name: install ssh keys
        #   run: |
        #     install -m 600 -D /dev/null ~/.ssh/id_rsa
        #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        #     ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

        - name: connect and pull
          uses: appleboy/ssh-action@v0.1.10
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            # port: ${{ secrets.PORT }}
            command_timeout: 30m
            script: | 
              cd ${{ secrets.WORK_DIR }} && \
              docker compose pull && \
              docker compose up -d && \
              exit
               
            # run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker compose pull && docker compose up -d && exit"

        # - name: cleanup
          # run: rm -rf ~/.ssh
